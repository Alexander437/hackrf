name: HackRF

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  ubuntu-build:
    name: Build for ubuntu-22.04
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
    - name: Setup a local venv (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the venv based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: poetry install

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    - name: Build frontend
      run: |
        cd frontend
        npm run deploy
        rsync -av --delete dist/* ../app/static

    - name: Build with Pyinstaller
      run: pyinstaller --distpath app --onefile backend/main.py

    - name: Prepare artifact directory
      run: |
        mkdir hrf_ubuntu
        mv app hrf_ubuntu/
        mv build hrf_ubuntu/
        mv main.spec hrf_ubuntu/
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: hrf_ubuntu
        path: hrf_ubuntu/
        if-no-files-found: warn
        retention-days: 90
        compression-level: 6
        overwrite: false

  windows-build:
    name: Build for windows-2022
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local venv (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the venv based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Build frontend
        run: |
          cd frontend
          npm run deploy
          powershell -command "Remove-Item -Recurse -Force ../app/static/*; Copy-Item -Recurse -Force dist/ ../app/static/"

      - name: Build with Pyinstaller
        run: pyinstaller --distpath app --onefile backend/main.py

      - name: Prepare artifact directory
        run: |
          mkdir hrf_windows
          mv app hrf_windows/
          mv build hrf_windows/
          mv main.spec hrf_windows/
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hrf_windows
          path: hrf_windows/
          if-no-files-found: warn
          retention-days: 90
          compression-level: 6
          overwrite: false
